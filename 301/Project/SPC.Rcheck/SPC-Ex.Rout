
R version 3.0.1 (2013-05-16) -- "Good Sport"
Copyright (C) 2013 The R Foundation for Statistical Computing
Platform: i386-w64-mingw32/i386 (32-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "SPC"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> library('SPC')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("SPC-package")
> ### * SPC-package
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SPC-package
> ### Title: SPC - Implements a Statistical Process Control (SPC) chart ~~
> ###   package title ~~
> ### Aliases: SPC-package SPC
> ### Keywords: package
> 
> ### ** Examples
> 
> batchAverages = c(0, 1.1,1.2,1.1,  1.3,1.4,1.3, 1.4,1.5,1.4,   0,  1.1,-1,1.1,1.2,1.1,   0,  2.2,1.1,2.3,   0,   4.1, -4.1)
> x.bar.batchAverages = 0 
> sigma.batchAverages = 1
> batchRanges = numeric(length(batchAverages))
> x.bar.batchRanges = 10
> sigma.batchRanges = 1.0
> for (i in 1:length(batchRanges)) { batchRanges[i] = x.bar.batchRanges + rnorm(1, 0, 0.5) }
> result = plotSpcChart(batchAverages, batchRanges, x.bar.batchAverages, sigma.batchAverages, x.bar.batchRanges, sigma.batchRanges)
> (result)
   batchAverage state.batchAverage batchRange state.batchRange
1           0.0                  0   9.686773                0
2           1.1                  4  10.091822                0
3           1.2                  4   9.582186                0
4           1.1                  4  10.797640                0
5           1.3                  4  10.164754                0
6           1.4                  4   9.589766                0
7           1.3                  4  10.243715                0
8           1.4                  4  10.369162                0
9           1.5                  4  10.287891                0
10          1.4                  4   9.847306                0
11          0.0                  0  10.755891                0
12          1.1                  3  10.194922                0
13         -1.0                  3   9.689380                0
14          1.1                  3   8.892650                0
15          1.2                  3  10.562465                0
16          1.1                  3   9.977533                0
17          0.0                  0   9.991905                0
18          2.2                  2  10.471918                0
19          1.1                  2  10.410611                0
20          2.3                  2  10.296951                0
21          0.0                  0  10.459489                0
22          4.1                  1  10.391068                0
23         -4.1                  1  10.037282                0
> 
> 
> 
> cleanEx()
> nameEx("classifyByWesternElectricRuleZones")
> ### * classifyByWesternElectricRuleZones
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: classifyByWesternElectricRuleZones
> ### Title: classifyByWesternElectricRuleZones
> ### Aliases: classifyByWesternElectricRuleZones
> ### Keywords: ~kwd1 ~kwd2
> 
> ### ** Examples
> 
> ## x = c(3.1, 2.1, 1.1, 0.1, 0, -0.1, -1.1, -2.1, -3.1)
> ## x.bar = 0
> ## sigma = 1
> ## xclass = classifyByWesternElectricRuleZones.numeric(x, x.bar, sigma)
> ## (xclass)
> ## #[1] "O" "A" "B" "C" "C" "C" "B" "A" "O"
> 
> ## The function is currently defined as
> function (x, x.bar = NULL, sigma = NULL) 
+ {
+     zones.numeric = classifyByWesternElectricRuleZones.numeric(x, 
+         x.bar, sigma)
+     zone.A = union(which(zones.numeric == 3), which(zones.numeric == 
+         -3))
+     zone.B = union(which(zones.numeric == 2), which(zones.numeric == 
+         -2))
+     zone.C = union(which(zones.numeric == 1), which(zones.numeric == 
+         -1))
+     zone.C = union(zone.C, which(zones.numeric == 0))
+     zone.Outlier = union(which(zones.numeric == 4), which(zones.numeric == 
+         -4))
+     zones = character(length(x))
+     zones[zone.A] = "A"
+     zones[zone.B] = "B"
+     zones[zone.C] = "C"
+     zones[zone.Outlier] = "O"
+     return(zones)
+   }
function (x, x.bar = NULL, sigma = NULL) 
{
    zones.numeric = classifyByWesternElectricRuleZones.numeric(x, 
        x.bar, sigma)
    zone.A = union(which(zones.numeric == 3), which(zones.numeric == 
        -3))
    zone.B = union(which(zones.numeric == 2), which(zones.numeric == 
        -2))
    zone.C = union(which(zones.numeric == 1), which(zones.numeric == 
        -1))
    zone.C = union(zone.C, which(zones.numeric == 0))
    zone.Outlier = union(which(zones.numeric == 4), which(zones.numeric == 
        -4))
    zones = character(length(x))
    zones[zone.A] = "A"
    zones[zone.B] = "B"
    zones[zone.C] = "C"
    zones[zone.Outlier] = "O"
    return(zones)
}
> 
> 
> 
> cleanEx()
> nameEx("classifyByWesternElectricRuleZones.numeric")
> ### * classifyByWesternElectricRuleZones.numeric
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: classifyByWesternElectricRuleZones.numeric
> ### Title: classifyByWesternElectricRuleZones.numeric
> ### Aliases: classifyByWesternElectricRuleZones.numeric
> ### Keywords: ~kwd1 ~kwd2
> 
> ### ** Examples
> 
> ## x = c(3.1, 2.1, 1.1, 0.1, 0, -0.1, -1.1, -2.1, -3.1)
> ## x.bar = 0
> ## sigma = 1
> ## xclass = classifyByWesternElectricRuleZones.numeric(x, x.bar, sigma)
> ## (xclass)
> ## # [1]  4  3  2  1  0 -1 -2 -3 -4
> 
> 
> ## The function is currently defined as
> function (x, x.bar = NULL, sigma = NULL) 
+ {
+     if (is.null(x.bar) || is.null(sigma)) {
+         x.bar = mean(x)
+         sigma = sd(x)
+     }
+     gt.pos.three.sigma = which(x > (x.bar + (3 * sigma)))
+     gt.pos.two.sigma = which(x > (x.bar + (2 * sigma)))
+     gt.pos.one.sigma = which(x > (x.bar + sigma))
+     gt.xbar = which(x > x.bar)
+     eq.xbar = which(x == x.bar)
+     lt.x.bar = which(x < x.bar)
+     lt.neg.one.sigma = which(x < (x.bar - sigma))
+     lt.neg.two.sigma = which(x < (x.bar - (2 * sigma)))
+     lt.neg.three.sigma = which(x < (x.bar - (3 * sigma)))
+     outliers = union(gt.pos.three.sigma, lt.neg.three.sigma)
+     pos.A = setdiff(gt.pos.two.sigma, gt.pos.three.sigma)
+     pos.B = setdiff(gt.pos.one.sigma, gt.pos.two.sigma)
+     pos.C = setdiff(gt.xbar, gt.pos.one.sigma)
+     neg.C = setdiff(lt.x.bar, lt.neg.one.sigma)
+     neg.B = setdiff(lt.neg.one.sigma, lt.neg.two.sigma)
+     neg.A = setdiff(lt.neg.two.sigma, lt.neg.three.sigma)
+     zones = numeric(length(x))
+     zones[gt.pos.three.sigma] = 4
+     zones[pos.A] = 3
+     zones[pos.B] = 2
+     zones[pos.C] = 1
+     zones[eq.xbar] = 0
+     zones[neg.C] = -1
+     zones[neg.B] = -2
+     zones[neg.A] = -3
+     zones[lt.neg.three.sigma] = -4
+     return(zones)
+   }
function (x, x.bar = NULL, sigma = NULL) 
{
    if (is.null(x.bar) || is.null(sigma)) {
        x.bar = mean(x)
        sigma = sd(x)
    }
    gt.pos.three.sigma = which(x > (x.bar + (3 * sigma)))
    gt.pos.two.sigma = which(x > (x.bar + (2 * sigma)))
    gt.pos.one.sigma = which(x > (x.bar + sigma))
    gt.xbar = which(x > x.bar)
    eq.xbar = which(x == x.bar)
    lt.x.bar = which(x < x.bar)
    lt.neg.one.sigma = which(x < (x.bar - sigma))
    lt.neg.two.sigma = which(x < (x.bar - (2 * sigma)))
    lt.neg.three.sigma = which(x < (x.bar - (3 * sigma)))
    outliers = union(gt.pos.three.sigma, lt.neg.three.sigma)
    pos.A = setdiff(gt.pos.two.sigma, gt.pos.three.sigma)
    pos.B = setdiff(gt.pos.one.sigma, gt.pos.two.sigma)
    pos.C = setdiff(gt.xbar, gt.pos.one.sigma)
    neg.C = setdiff(lt.x.bar, lt.neg.one.sigma)
    neg.B = setdiff(lt.neg.one.sigma, lt.neg.two.sigma)
    neg.A = setdiff(lt.neg.two.sigma, lt.neg.three.sigma)
    zones = numeric(length(x))
    zones[gt.pos.three.sigma] = 4
    zones[pos.A] = 3
    zones[pos.B] = 2
    zones[pos.C] = 1
    zones[eq.xbar] = 0
    zones[neg.C] = -1
    zones[neg.B] = -2
    zones[neg.A] = -3
    zones[lt.neg.three.sigma] = -4
    return(zones)
}
> 
> 
> 
> cleanEx()
> nameEx("findWesternElectricRuleViolations")
> ### * findWesternElectricRuleViolations
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: findWesternElectricRuleViolations
> ### Title: findWesternElectricRuleViolations
> ### Aliases: findWesternElectricRuleViolations
> ### Keywords: ~kwd1 ~kwd2
> 
> ### ** Examples
> 
> x.bar = 0 
> ## sigma = 1	
> ## x = c(0, 1.1,1.2,1.1,  1.3,1.4,1.3, 1.4,1.5,1.4, 0,  1.1,-1.0,1.1,1.2,1.1, 0.0, 2.2,1.1,2.3, 0, 4.1, -4.1)
> 
> ## results =  findWesternElectricRuleViolations(x, x.bar, sigma)
> ## (results)
> 
> ## The function is currently defined as
> function (x, x.bar = NULL, sigma = NULL) 
+ {
+     if (is.null(x.bar) || is.null(sigma)) {
+         x.bar = mean(x)
+         sigma = sd(x)
+     }
+     results <- data.frame(idxInitial = numeric(), idxFinal = numeric(), 
+         rule = numeric())
+     nItems = length(x)
+     zones.numeric = classifyByWesternElectricRuleZones.numeric(x, 
+         x.bar, sigma)
+     minRunLen = 9
+     for (idxInitial in 1:(nItems - minRunLen + 1)) {
+         idxFinal = (idxInitial + minRunLen - 1)
+         if ((all(zones.numeric[idxInitial:idxFinal] > 0)) || 
+             (all(zones.numeric[idxInitial:idxFinal] < 0))) {
+             results = logWesternElectricRuleViolation(results, 
+                 idxInitial, idxFinal, 4)
+         }
+     }
+     minRunLen = 5
+     for (idxInitial in 1:(nItems - minRunLen + 1)) {
+         idxFinal = (idxInitial + minRunLen - 1)
+         if ((any(zones.numeric[idxInitial:idxFinal] > 1)) || 
+             (any(zones.numeric[idxInitial:idxFinal] < -1))) {
+             countZoneB = 0
+             countOpposite = 0
+             matched = 0
+             for (i in idxInitial:idxFinal) {
+                 if (zones.numeric[i] > 1) {
+                   countZoneB = countZoneB + 1
+                 }
+                 else if (zones.numeric[i] < 0) {
+                   countOpposite = countOpposite + 1
+                 }
+             }
+             if ((countZoneB == 4) && (countOpposite == 1)) {
+                 matched = 1
+             }
+             if (matched == 0) {
+                 countZoneB = 0
+                 countOpposite = 0
+                 for (i in idxInitial:idxFinal) {
+                   if (zones.numeric[i] < -1) {
+                     countZoneB = countZoneB + 1
+                   }
+                   else if (zones.numeric[i] > 0) {
+                     countOpposite = countOpposite + 1
+                   }
+                   if ((countZoneB == 4) && (countOpposite == 
+                     1)) {
+                     matched = 1
+                   }
+                 }
+             }
+             if (matched == 1) {
+                 results = logWesternElectricRuleViolation(results, 
+                   idxInitial, idxFinal, 3)
+             }
+         }
+     }
+     minRunLen = 3
+     for (idxInitial in 1:(nItems - minRunLen + 1)) {
+         idxFinal = (idxInitial + minRunLen - 1)
+         if ((any(zones.numeric[idxInitial:idxFinal] > 2)) || 
+             (any(zones.numeric[idxInitial:idxFinal] < -2))) {
+             countZoneA = 0
+             countSameSide = 0
+             matched = 0
+             for (i in idxInitial:idxFinal) {
+                 if (zones.numeric[i] > 2) {
+                   countZoneA = countZoneA + 1
+                 }
+                 else if (zones.numeric[i] > 0) {
+                   countSameSide = countSameSide + 1
+                 }
+             }
+             if ((countZoneA == 2) && (countSameSide == 1)) {
+                 matched = 1
+             }
+             if (matched == 0) {
+                 countZoneA = 0
+                 countSameSide = 0
+                 for (i in idxInitial:idxFinal) {
+                   if (zones.numeric[i] < -2) {
+                     countZoneA = countZoneA + 1
+                   }
+                   else if (zones.numeric[i] < 0) {
+                     countSameSide = countSameSide + 1
+                   }
+                   if ((countZoneB == 2) && (countSameSide == 
+                     1)) {
+                     matched = 1
+                   }
+                 }
+             }
+             if (matched == 1) {
+                 results = logWesternElectricRuleViolation(results, 
+                   idxInitial, idxFinal, 2)
+             }
+         }
+     }
+     violations = sort(union(which(zones.numeric == 4), which(zones.numeric == 
+         -4)))
+     if (length(violations) > 0) {
+         for (i in 1:length(violations)) {
+             results = logWesternElectricRuleViolation(results, 
+                 violations[i], violations[i], 1)
+         }
+     }
+     return(results)
+   }
function (x, x.bar = NULL, sigma = NULL) 
{
    if (is.null(x.bar) || is.null(sigma)) {
        x.bar = mean(x)
        sigma = sd(x)
    }
    results <- data.frame(idxInitial = numeric(), idxFinal = numeric(), 
        rule = numeric())
    nItems = length(x)
    zones.numeric = classifyByWesternElectricRuleZones.numeric(x, 
        x.bar, sigma)
    minRunLen = 9
    for (idxInitial in 1:(nItems - minRunLen + 1)) {
        idxFinal = (idxInitial + minRunLen - 1)
        if ((all(zones.numeric[idxInitial:idxFinal] > 0)) || 
            (all(zones.numeric[idxInitial:idxFinal] < 0))) {
            results = logWesternElectricRuleViolation(results, 
                idxInitial, idxFinal, 4)
        }
    }
    minRunLen = 5
    for (idxInitial in 1:(nItems - minRunLen + 1)) {
        idxFinal = (idxInitial + minRunLen - 1)
        if ((any(zones.numeric[idxInitial:idxFinal] > 1)) || 
            (any(zones.numeric[idxInitial:idxFinal] < -1))) {
            countZoneB = 0
            countOpposite = 0
            matched = 0
            for (i in idxInitial:idxFinal) {
                if (zones.numeric[i] > 1) {
                  countZoneB = countZoneB + 1
                }
                else if (zones.numeric[i] < 0) {
                  countOpposite = countOpposite + 1
                }
            }
            if ((countZoneB == 4) && (countOpposite == 1)) {
                matched = 1
            }
            if (matched == 0) {
                countZoneB = 0
                countOpposite = 0
                for (i in idxInitial:idxFinal) {
                  if (zones.numeric[i] < -1) {
                    countZoneB = countZoneB + 1
                  }
                  else if (zones.numeric[i] > 0) {
                    countOpposite = countOpposite + 1
                  }
                  if ((countZoneB == 4) && (countOpposite == 
                    1)) {
                    matched = 1
                  }
                }
            }
            if (matched == 1) {
                results = logWesternElectricRuleViolation(results, 
                  idxInitial, idxFinal, 3)
            }
        }
    }
    minRunLen = 3
    for (idxInitial in 1:(nItems - minRunLen + 1)) {
        idxFinal = (idxInitial + minRunLen - 1)
        if ((any(zones.numeric[idxInitial:idxFinal] > 2)) || 
            (any(zones.numeric[idxInitial:idxFinal] < -2))) {
            countZoneA = 0
            countSameSide = 0
            matched = 0
            for (i in idxInitial:idxFinal) {
                if (zones.numeric[i] > 2) {
                  countZoneA = countZoneA + 1
                }
                else if (zones.numeric[i] > 0) {
                  countSameSide = countSameSide + 1
                }
            }
            if ((countZoneA == 2) && (countSameSide == 1)) {
                matched = 1
            }
            if (matched == 0) {
                countZoneA = 0
                countSameSide = 0
                for (i in idxInitial:idxFinal) {
                  if (zones.numeric[i] < -2) {
                    countZoneA = countZoneA + 1
                  }
                  else if (zones.numeric[i] < 0) {
                    countSameSide = countSameSide + 1
                  }
                  if ((countZoneB == 2) && (countSameSide == 
                    1)) {
                    matched = 1
                  }
                }
            }
            if (matched == 1) {
                results = logWesternElectricRuleViolation(results, 
                  idxInitial, idxFinal, 2)
            }
        }
    }
    violations = sort(union(which(zones.numeric == 4), which(zones.numeric == 
        -4)))
    if (length(violations) > 0) {
        for (i in 1:length(violations)) {
            results = logWesternElectricRuleViolation(results, 
                violations[i], violations[i], 1)
        }
    }
    return(results)
}
> 
> 
> 
> cleanEx()
> nameEx("logWesternElectricRuleViolation")
> ### * logWesternElectricRuleViolation
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: logWesternElectricRuleViolation
> ### Title: logWesternElectricRuleViolation
> ### Aliases: logWesternElectricRuleViolation
> ### Keywords: ~kwd1 ~kwd2
> 
> ### ** Examples
> 
> ## results <- data.frame(idxInitial = numeric(), idxFinal = numeric(), rule = numeric())
> ## results <- logWesternElectricRuleViolation(results, 5, 5, 1)
> ## (results)
> 
> ## The function is currently defined as
> function (results, idxInitial, idxFinal, rule) 
+ {
+     result <- data.frame(idxInitial = idxInitial, idxFinal = idxFinal, 
+         rule = rule)
+     results <- rbind(results, result)
+     return(results)
+   }
function (results, idxInitial, idxFinal, rule) 
{
    result <- data.frame(idxInitial = idxInitial, idxFinal = idxFinal, 
        rule = rule)
    results <- rbind(results, result)
    return(results)
}
> 
> 
> 
> cleanEx()
> nameEx("plotSpcChart")
> ### * plotSpcChart
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotSpcChart
> ### Title: plotSpcChart
> ### Aliases: plotSpcChart
> ### Keywords: ~kwd1 ~kwd2
> 
> ### ** Examples
> 
> ## batchAverages = c(0, 1.1,1.2,1.1,  1.3,1.4,1.3, 1.4,1.5,1.4,   0,  1.1,-1,1.1,1.2,1.1,   0,  2.2,1.1,2.3,   0,   4.1, -4.1)
> ## x.bar.batchAverages = 0 
> ## sigma.batchAverages = 1
> ## batchRanges = numeric(length(batchAverages))
> ## x.bar.batchRanges = 10
> ## sigma.batchRanges = 1.0
> ## for (i in 1:length(batchRanges)) { batchRanges[i] = x.bar.batchRanges + rnorm(1, 0, 0.5) }
> ## result = plotSpcChart(batchAverages, batchRanges, x.bar.batchAverages, sigma.batchAverages, x.bar.batchRanges, sigma.batchRanges)
> ## (result)
> 
> 
> ## The function is currently defined as
> function (batchAverages, batchRanges, x.bar.batchAverages = NULL, 
+     sigma.batchAverages = NULL, x.bar.batchRanges = NULL, sigma.batchRanges = NULL) 
+ {
+     if ((is.null(x.bar.batchAverages)) || (is.null(sigma.batchAverages))) {
+         x.bar.batchAverages = mean(batchAverages)
+         sigma.batchAverages = sd(batchAverages)
+     }
+     if ((is.null(x.bar.batchRanges)) || (is.null(sigma.batchRanges))) {
+         x.bar.batchRanges = mean(batchRanges)
+         sigma.batchRanges = sd(batchRanges)
+     }
+     spc.violations.batchAverages = findWesternElectricRuleViolations(batchAverages, 
+         x.bar.batchAverages, sigma.batchAverages)
+     spc.violations.batchRanges = findWesternElectricRuleViolations(batchRanges, 
+         x.bar.batchRanges, sigma.batchRanges)
+     spc.state.batchAverages = rep(0, length(batchAverages))
+     if (length(spc.violations.batchAverages[, 1]) > 0) {
+         for (i in 1:length(spc.violations.batchAverages[, 1])) {
+             spc.state.batchAverages[spc.violations.batchAverages$idxInitial[i]:spc.violations.batchAverages$idxFinal[i]] = spc.violations.batchAverages$rule[i]
+         }
+     }
+     spc.state.batchRanges = rep(0, length(batchRanges))
+     if (length(spc.violations.batchRanges[, 1]) > 0) {
+         for (i in 1:length(spc.violations.batchRanges[, 1])) {
+             spc.state.batchRanges[spc.violations.batchRanges$idxInitial[i]:spc.violations.batchRanges$idxFinal[i]] = spc.violations.batchRanges$rule[i]
+         }
+     }
+     spcData = data.frame(batchAverage = numeric(), state.batchAverage = numeric())
+     for (i in 1:length(batchAverages)) {
+         nextRow = data.frame(batchAverage = batchAverages[i], 
+             state.batchAverage = spc.state.batchAverages[i], 
+             batchRange = batchRanges[i], state.batchRange = spc.state.batchRanges[i])
+         spcData <- rbind(spcData, nextRow)
+     }
+     cols = c(rgb(0, 1, 0, 0.6), rgb(1, 1, 0, 0.6), rgb(1, 0.6, 
+         0, 0.6), rgb(0, 0, 1, 0.6), rgb(1, 0, 1, 0.6))
+     prevOp <- par(fig = c(0, 1, 0.5, 1))
+     par(mar = c(0, 5, 2, 2))
+     par(cex = 0.64)
+     plot(spcData$batchAverage, col = cols[spcData$state.batchAverage + 
+         1], xlab = "", xaxt = "n", type = "b", main = "SPC Chart", 
+         ylab = "Batch Averages", pch = 19)
+     legend("topleft", horiz = TRUE, legend = c("In Control", 
+         "Rule 1", "Rule 2", "Rule 3", "Rule 4"), col = cols, 
+         pch = 19)
+     abline(h = x.bar.batchAverages)
+     abline(h = (x.bar.batchAverages + (1 * sigma.batchAverages)), 
+         lty = "dashed", col = rgb(0, 0, 0, 0.4))
+     abline(h = (x.bar.batchAverages + (2 * sigma.batchAverages)), 
+         lty = "dashed", col = rgb(0, 0, 0, 0.4))
+     abline(h = (x.bar.batchAverages + (3 * sigma.batchAverages)), 
+         lty = "dashed", col = rgb(0, 0, 0, 0.4))
+     abline(h = (x.bar.batchAverages - (1 * sigma.batchAverages)), 
+         lty = "dashed", col = rgb(0, 0, 0, 0.4))
+     abline(h = (x.bar.batchAverages - (2 * sigma.batchAverages)), 
+         lty = "dashed", col = rgb(0, 0, 0, 0.4))
+     abline(h = (x.bar.batchAverages - (3 * sigma.batchAverages)), 
+         lty = "dashed", col = rgb(0, 0, 0, 0.4))
+     par(fig = c(0, 1, 0, 0.5), new = TRUE)
+     par(mar = c(5, 5, 0, 2))
+     plot(spcData$batchRange, col = cols[spcData$state.batchRange + 
+         1], xlab = "", ylab = "Batch Ranges", type = "b", pch = 19)
+     abline(h = x.bar.batchRanges)
+     abline(h = (x.bar.batchRanges + (1 * sigma.batchRanges)), 
+         lty = "dashed", col = rgb(0, 0, 0, 0.4))
+     abline(h = (x.bar.batchRanges + (2 * sigma.batchRanges)), 
+         lty = "dashed", col = rgb(0, 0, 0, 0.4))
+     abline(h = (x.bar.batchRanges + (3 * sigma.batchRanges)), 
+         lty = "dashed", col = rgb(0, 0, 0, 0.4))
+     abline(h = (x.bar.batchRanges - (1 * sigma.batchRanges)), 
+         lty = "dashed", col = rgb(0, 0, 0, 0.4))
+     abline(h = (x.bar.batchRanges - (2 * sigma.batchRanges)), 
+         lty = "dashed", col = rgb(0, 0, 0, 0.4))
+     abline(h = (x.bar.batchRanges - (3 * sigma.batchRanges)), 
+         lty = "dashed", col = rgb(0, 0, 0, 0.4))
+     par(prevOp)
+     return(spcData)
+   }
function (batchAverages, batchRanges, x.bar.batchAverages = NULL, 
    sigma.batchAverages = NULL, x.bar.batchRanges = NULL, sigma.batchRanges = NULL) 
{
    if ((is.null(x.bar.batchAverages)) || (is.null(sigma.batchAverages))) {
        x.bar.batchAverages = mean(batchAverages)
        sigma.batchAverages = sd(batchAverages)
    }
    if ((is.null(x.bar.batchRanges)) || (is.null(sigma.batchRanges))) {
        x.bar.batchRanges = mean(batchRanges)
        sigma.batchRanges = sd(batchRanges)
    }
    spc.violations.batchAverages = findWesternElectricRuleViolations(batchAverages, 
        x.bar.batchAverages, sigma.batchAverages)
    spc.violations.batchRanges = findWesternElectricRuleViolations(batchRanges, 
        x.bar.batchRanges, sigma.batchRanges)
    spc.state.batchAverages = rep(0, length(batchAverages))
    if (length(spc.violations.batchAverages[, 1]) > 0) {
        for (i in 1:length(spc.violations.batchAverages[, 1])) {
            spc.state.batchAverages[spc.violations.batchAverages$idxInitial[i]:spc.violations.batchAverages$idxFinal[i]] = spc.violations.batchAverages$rule[i]
        }
    }
    spc.state.batchRanges = rep(0, length(batchRanges))
    if (length(spc.violations.batchRanges[, 1]) > 0) {
        for (i in 1:length(spc.violations.batchRanges[, 1])) {
            spc.state.batchRanges[spc.violations.batchRanges$idxInitial[i]:spc.violations.batchRanges$idxFinal[i]] = spc.violations.batchRanges$rule[i]
        }
    }
    spcData = data.frame(batchAverage = numeric(), state.batchAverage = numeric())
    for (i in 1:length(batchAverages)) {
        nextRow = data.frame(batchAverage = batchAverages[i], 
            state.batchAverage = spc.state.batchAverages[i], 
            batchRange = batchRanges[i], state.batchRange = spc.state.batchRanges[i])
        spcData <- rbind(spcData, nextRow)
    }
    cols = c(rgb(0, 1, 0, 0.6), rgb(1, 1, 0, 0.6), rgb(1, 0.6, 
        0, 0.6), rgb(0, 0, 1, 0.6), rgb(1, 0, 1, 0.6))
    prevOp <- par(fig = c(0, 1, 0.5, 1))
    par(mar = c(0, 5, 2, 2))
    par(cex = 0.64)
    plot(spcData$batchAverage, col = cols[spcData$state.batchAverage + 
        1], xlab = "", xaxt = "n", type = "b", main = "SPC Chart", 
        ylab = "Batch Averages", pch = 19)
    legend("topleft", horiz = TRUE, legend = c("In Control", 
        "Rule 1", "Rule 2", "Rule 3", "Rule 4"), col = cols, 
        pch = 19)
    abline(h = x.bar.batchAverages)
    abline(h = (x.bar.batchAverages + (1 * sigma.batchAverages)), 
        lty = "dashed", col = rgb(0, 0, 0, 0.4))
    abline(h = (x.bar.batchAverages + (2 * sigma.batchAverages)), 
        lty = "dashed", col = rgb(0, 0, 0, 0.4))
    abline(h = (x.bar.batchAverages + (3 * sigma.batchAverages)), 
        lty = "dashed", col = rgb(0, 0, 0, 0.4))
    abline(h = (x.bar.batchAverages - (1 * sigma.batchAverages)), 
        lty = "dashed", col = rgb(0, 0, 0, 0.4))
    abline(h = (x.bar.batchAverages - (2 * sigma.batchAverages)), 
        lty = "dashed", col = rgb(0, 0, 0, 0.4))
    abline(h = (x.bar.batchAverages - (3 * sigma.batchAverages)), 
        lty = "dashed", col = rgb(0, 0, 0, 0.4))
    par(fig = c(0, 1, 0, 0.5), new = TRUE)
    par(mar = c(5, 5, 0, 2))
    plot(spcData$batchRange, col = cols[spcData$state.batchRange + 
        1], xlab = "", ylab = "Batch Ranges", type = "b", pch = 19)
    abline(h = x.bar.batchRanges)
    abline(h = (x.bar.batchRanges + (1 * sigma.batchRanges)), 
        lty = "dashed", col = rgb(0, 0, 0, 0.4))
    abline(h = (x.bar.batchRanges + (2 * sigma.batchRanges)), 
        lty = "dashed", col = rgb(0, 0, 0, 0.4))
    abline(h = (x.bar.batchRanges + (3 * sigma.batchRanges)), 
        lty = "dashed", col = rgb(0, 0, 0, 0.4))
    abline(h = (x.bar.batchRanges - (1 * sigma.batchRanges)), 
        lty = "dashed", col = rgb(0, 0, 0, 0.4))
    abline(h = (x.bar.batchRanges - (2 * sigma.batchRanges)), 
        lty = "dashed", col = rgb(0, 0, 0, 0.4))
    abline(h = (x.bar.batchRanges - (3 * sigma.batchRanges)), 
        lty = "dashed", col = rgb(0, 0, 0, 0.4))
    par(prevOp)
    return(spcData)
}
> 
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("spcSampleData")
> ### * spcSampleData
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: spcSampleData
> ### Title: spcSampleData - example of data produced by plotSpcData
> ### Aliases: spcSampleData
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(spcSampleData)
> head(spcSampleData)
  batchAverage state.batchAverage batchRange state.batchRange
1          0.0                  0  10.361545                0
2          1.1                  4  10.970503                0
3          1.2                  4   9.349309                0
4          1.1                  4  10.093477                0
5          1.3                  4  10.103685                0
6          1.4                  4   9.924803                0
> ## maybe str(spcSampleData) ; plot(spcSampleData) ...
> 
> 
> 
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.31 0 0.33 NA NA 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
